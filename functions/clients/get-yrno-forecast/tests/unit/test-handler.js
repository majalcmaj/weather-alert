'use strict';

import axios from 'axios';
import sinon from 'sinon';
import {expect} from 'chai';
import fs from 'fs/promises';

import {lambdaHandler} from '../../app.js';

const event = {}, context = {};


async function readExampleResponse() {
  return fs.readFile('./tests/unit/example-response.json', 'utf-8').then(context => JSON.parse(context));
}

describe('Test Yr.No forecast client', function () {
  it('Parses example response properly', async () => {
    const response = await readExampleResponse();
    sinon.stub(axios, 'get').returns(Promise.resolve({ data: response }));

    const result = await lambdaHandler(event, context)

    expect(result).to.be.an('object');
    expect(result.forecast.timestamps).to.have.same.members(["2021-05-31T19:00:00Z", "2021-05-31T20:00:00Z", "2021-05-31T21:00:00Z", "2021-05-31T22:00:00Z", "2021-05-31T23:00:00Z", "2021-06-01T00:00:00Z", "2021-06-01T01:00:00Z", "2021-06-01T02:00:00Z", "2021-06-01T03:00:00Z", "2021-06-01T04:00:00Z", "2021-06-01T05:00:00Z", "2021-06-01T06:00:00Z", "2021-06-01T07:00:00Z", "2021-06-01T08:00:00Z", "2021-06-01T09:00:00Z", "2021-06-01T10:00:00Z", "2021-06-01T11:00:00Z", "2021-06-01T12:00:00Z", "2021-06-01T13:00:00Z", "2021-06-01T14:00:00Z", "2021-06-01T15:00:00Z", "2021-06-01T16:00:00Z", "2021-06-01T17:00:00Z", "2021-06-01T18:00:00Z", "2021-06-01T19:00:00Z", "2021-06-01T20:00:00Z", "2021-06-01T21:00:00Z", "2021-06-01T22:00:00Z", "2021-06-01T23:00:00Z", "2021-06-02T00:00:00Z", "2021-06-02T01:00:00Z", "2021-06-02T02:00:00Z", "2021-06-02T03:00:00Z", "2021-06-02T04:00:00Z", "2021-06-02T05:00:00Z", "2021-06-02T06:00:00Z", "2021-06-02T07:00:00Z", "2021-06-02T08:00:00Z", "2021-06-02T09:00:00Z", "2021-06-02T10:00:00Z", "2021-06-02T11:00:00Z", "2021-06-02T12:00:00Z", "2021-06-02T13:00:00Z", "2021-06-02T14:00:00Z", "2021-06-02T15:00:00Z", "2021-06-02T16:00:00Z", "2021-06-02T17:00:00Z", "2021-06-02T18:00:00Z", "2021-06-02T19:00:00Z", "2021-06-02T20:00:00Z", "2021-06-02T21:00:00Z", "2021-06-02T22:00:00Z", "2021-06-02T23:00:00Z", "2021-06-03T00:00:00Z", "2021-06-03T06:00:00Z", "2021-06-03T12:00:00Z", "2021-06-03T18:00:00Z", "2021-06-04T00:00:00Z", "2021-06-04T06:00:00Z", "2021-06-04T12:00:00Z", "2021-06-04T18:00:00Z", "2021-06-05T00:00:00Z", "2021-06-05T06:00:00Z", "2021-06-05T12:00:00Z", "2021-06-05T18:00:00Z", "2021-06-06T00:00:00Z", "2021-06-06T06:00:00Z", "2021-06-06T12:00:00Z", "2021-06-06T18:00:00Z", "2021-06-07T00:00:00Z", "2021-06-07T06:00:00Z", "2021-06-07T12:00:00Z", "2021-06-07T18:00:00Z", "2021-06-08T00:00:00Z", "2021-06-08T06:00:00Z", "2021-06-08T12:00:00Z", "2021-06-08T18:00:00Z", "2021-06-09T00:00:00Z", "2021-06-09T06:00:00Z", "2021-06-09T12:00:00Z", "2021-06-09T18:00:00Z"]);
    expect(result.forecast.windSpeeds).to.have.same.members([2.5, 2.8, 3.1, 3.8, 4.1, 3.5, 4.2, 5, 5.9, 1.8, 1.4, 2, 3.4, 3.4, 4.5, 4.5, 4.7, 5.8, 6.3, 5.8, 5.1, 4.7, 4.6, 3.2, 3.1, 2.4, 2.1, 2.1, 1.2, 1, 0.9, 2.8, 2.5, 1.9, 1.3, 2, 2.1, 3.2, 4.8, 5.8, 7, 7.3, 6.6, 6.5, 6.4, 5.7, 5.4, 4.4, 4.7, 4.1, 5.1, 4.7, 3.3, 1.4, 1.6, 3.1, 2.1, 1.2, 1.2, 2.8, 2.2, 1.2, 1.2, 2.7, 2.1, 1.2, 1.2, 2.7, 1.8, 1.3, 1.3, 3, 2, 1.3, 1.4, 2.8, 2.1, 1.4, 2, 3.2, 2]);
    expect(result.forecast.windDirections).to.have.same.members([125.7, 156.3, 181.6, 183, 192.7, 204, 214.6, 189, 239.5, 198, 185.4, 190.1, 336.3, 13.9, 354.9, 356.4, 358.1, 357.5, 358.6, 0.5, 2, 356.9, 353, 355.2, 4.8, 58.8, 103.6, 150.1, 123.6, 103.5, 166.4, 185.1, 171, 152.4, 118.2, 71.2, 88.3, 73.9, 81.7, 78.9, 67.3, 70, 61, 53.8, 55.9, 59.5, 64.1, 64.6, 64, 80.6, 85.7, 88.7, 92.7, 137.6, 92.7, 96.2, 59, 91.3, 74.4, 64.5, 79.6, 210.2, 151.2, 119.6, 71.5, 109, 177, 92.2, 54.2, 107.4, 44.3, 114.4, 71.4, 202.1, 28.1, 52.1, 71.6, 249.6, 339.9, 34.3, 313.4]);
  });
});
